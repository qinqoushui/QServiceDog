@{
    ViewData["Title"] = "业务服务";
}

@(Html.DevExtreme()
       .DataGrid<QServiceDog.Models.ServiceInfo>().ID("gridContainer").Columns(columns =>
       {
           columns.AddFor(m => m.Id).Hide();
           columns.AddFor(m => m.Client).Caption("项目位置").AllowEditing(false).FormItem(r=>r.Visible(false));
           columns.AddFor(m => m.Name).Caption("名称/服务名") ;
           columns.AddFor(m => m.Desc).MinWidth(120) ;
           columns.AddFor(m => m.CheckName).Caption("检测方法").MinWidth(100).Lookup(lookup => lookup.DataSource(d => d.Mvc().Controller(nameof(QServiceDog.Models.DogAction)).LoadAction("GetByType").LoadParams(new { Type = "Check" }).Key("Id"))
        .DisplayExpr("Name").ValueExpr("Name")
            );
           columns.AddFor(m => m.CheckData).Caption("检测数据").MinWidth(120);
           columns.AddFor(m => m.RunName).Caption("启动方法").MinWidth(100).Lookup(lookup => lookup.DataSource(d => d.Mvc().Controller(nameof(QServiceDog.Models.DogAction)).LoadAction("GetByType").LoadParams(new { Type="Run" }).Key("Id"))
    .DisplayExpr("Name").ValueExpr("Name")
        );
           columns.AddFor(m => m.RunData).Caption("启动数据").MinWidth(120);
           columns.AddFor(m => m.StopName).Caption("停止方法").MinWidth(100).Lookup(lookup => lookup.DataSource(d => d.Mvc().Controller(nameof(QServiceDog.Models.DogAction)).LoadAction("GetByType").LoadParams(new { Type = "Stop" }).Key("Id"))
    .DisplayExpr("Name").ValueExpr("Name")
        );
           columns.AddFor(m => m.StopData).Caption("停止数据").MinWidth(120);

           columns.AddFor(m => m.LastAliveTime).Caption("上次存活时间").DataType( GridColumnDataType.DateTime).Format("yyyy-MM-dd HH:mm:ss").Width(180);
           columns.AddFor(m => m.LastStopTime).Caption("上次重启时间").DataType( GridColumnDataType.DateTime).Format("yyyy-MM-dd HH:mm:ss").Width(180);
           columns.AddFor(m => m.IdleTime).Caption("发呆时长") ;
           columns.AddFor(m => m.RestartTime).Caption("重启间隔时长") ;
           columns.AddFor(m => m.IsEnable).Caption("是否启用").TrueText("是").FalseText("否").ShowEditorAlways(false); ;
           columns.AddFor(m => m.IsAlive).Caption("是否存活") .TrueText("是").FalseText("否").ShowEditorAlways(false).AllowEditing(false) ;

       }).StartDataGrid(nameof(QServiceDog.Models.ServiceInfo),"Id", Convert.ToBoolean(ViewData["IsAdmin"]))
       .Editing(e =>
       {
           e.AllowAdding(true);
           e.AllowUpdating(true);
           e.AllowDeleting(true);
           e.Mode(GridEditMode.Popup);
           e.Popup(
                p => p
                .Title("ServiceInfo")
                .ShowTitle(true)
            );
           e.Form(f =>
           {
               f.Items(items=>
               {
                   items.AddGroup().ColCount(2).ColSpan(2).Items(its => {
                       its.AddSimpleFor(m=>m.Name);
                       its.AddSimpleFor(m=>m.Desc);
                       its.AddSimpleFor(m=>m.CheckName);
                       its.AddSimpleFor(m=>m.CheckData);
                       its.AddSimpleFor(m=>m.RunName);
                       its.AddSimpleFor(m=>m.RunData).Editor(ed=>ed.TextBox().Name("taProcess"));
                       its.AddSimpleFor(m=>m.StopName);
                       its.AddSimpleFor(m=>m.StopData);
                       its.AddSimpleFor(m=>m.LastAliveTime);
                       its.AddSimpleFor(m => m.LastStopTime);
                       its.AddSimpleFor(m => m.IdleTime);
                       its.AddSimpleFor(m => m.RestartTime);
                       its.AddSimpleFor(m => m.IsEnable);
                       //its.AddSimpleFor(m => m.IsAlive);

                   });
                  
                   items.AddGroup().Caption("辅助工具").ColCount(2).ColSpan(2).Items(its =>
                   {
                       its.AddSimple().Editor(ed =>  ed.SelectBox().DataSource(d=>d.Mvc().Controller(nameof(QServiceDog.Models.ServiceInfo)).LoadAction("GetProcess")) ).Label(l => l.Text("进程列表"));
                       its.AddSimple().Label(l => l.Text("文件所在目录")).Editor(ed => ed.TextBox().Name("tbProcess"));
                       its.AddEmpty();
                       its.AddButton().ButtonOptions(op => op.OnClick("chooseFile").Text("生成启动数据"));
                   });
               });
           }).Option("id","frm");
       }

       )
       .OnRowPrepared("onRowPrepared"). OnInitNewRow("inseredEvent").OnToolbarPreparing("onToolbarPreparing")

)

@using (Html.DevExtreme().NamedTemplate("EmbeddedDataGridSingle"))
{
    @(Html.DevExtreme().DataGrid()
        .ID("embedded-datagrid")
        .DataSource(new JS(@"component.getDataSource()"))
        .HeaderFilter(r=>r.Visible(true))
        .Columns(columns => {
            columns.Add().DataField("Client").Caption("类型");
            columns.Add().DataField("Name").Caption("名称");
            columns.Add().DataField("Desc").Caption("描述");
        })
        .HoverStateEnabled(true)
        .Paging(p => p.PageSize(10))
        .FilterRow(f => f.Visible(true))
        .Scrolling(s => s.Mode(GridScrollingMode.Infinite))
        .Height(345)
        .Selection(s => s.Mode(SelectionMode.Single))
        .SelectedRowKeys(new JS(@"[component.option(""value"")]"))
        .OnSelectionChanged(@<text>
            function(selectedItems) {
                var keys = selectedItems.selectedRowKeys;
                component.option("value", keys);
            }
        </text>)




    )
}

<input type="file" id="afile" name="afile" style="display:none" onchange="getFullPath(this)" />

<script>
    $(function () {
        $("#txtArea").dxDropDownBox({
            displayExpr: gridBox_displayExpr,

            dropDownOptions: { width: 500 },
            onValueChanged: gridBox_valueChanged,
            contentTemplate: EmbeddedDataGridSingle,
            showDropDownButton: true,
            showClearButton: true,
            dataSource: DevExpress.data.AspNet.createStore({
                // key: "Id", //会影响valuechanged
                loadUrl: "../ServiceTpl/Get",
                loadMode: 'raw'
            })
        });

        setInterval(function () {
            reQuery($("#gridContainer"));
        }, 120000);
    });
    var tplData;
    function inseredEvent(data) {
        var day2 = new Date();
        data.data.Client = "@QServiceDog.Helpers.GlobalConfig.Instance.Client";
        data.data.LastAliveTime = day2.getFullYear() + "-" + (day2.getMonth() + 1) + "-" + day2.getDate() + " 00:00:01";
        data.data.LastStopTime = day2.getFullYear() + "-" + (day2.getMonth() + 1) + "-" + day2.getDate() + " 00:00:01";
        if (tplData) {
            data.data.Name = tplData.Name;
            data.data.Desc = tplData.Desc;
            data.data.IdleTime = tplData.IdleTime;
            data.data.RestartTime = tplData.RestartTime;
            data.data.RunName = tplData.RunName;
            data.data.RunData = tplData.RunData;
            data.data.StopName = tplData.StopName;
            data.data.StopData = tplData.StopData;
            data.data.CheckName = tplData.CheckName;
            data.data.CheckData = tplData.CheckData;
        }
        else {
            data.data.IdleTime = "00:05:00";
            data.data.RestartTime = "1.00:00:01";
        }
    }
    function onRowPrepared(e) {

        if (e.rowType == "data" && !e.data.IsAlive) {
            e.rowElement[0].style.color = "red";
            //e.rowElement[0].style.backgroundColor = "red";
        }
        else {
            e.rowElement[0].style.color = "black";
        }
    }


    function gridBox_valueChanged(e) {
        var $dataGrid = $("#embedded-datagrid");

        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(e.value, false);
            tplData = e.value[0];
            if (e.value.length > 0) {
                e.component.close();
            }
        }
    }

    function gridBox_displayExpr(item) {
        return item && (item.Name + " " + item.Desc);
    }


    function onToolbarPreparing(e) {
        var isAdmin = @(Convert.ToBoolean(ViewData["IsAdmin"])?1:0);
        if (isAdmin) {
            e.toolbarOptions.items.unshift({
            location: "after",
                template: function () {
                    return $("<div/>")
                        .append(
                            $("<h4/>").text("模板:")

                        );
                }
            }, {
            location: "after",
                template: function () {
                    return $("<div id='txtArea' style='width:300px;height:35px;'/>");
                }
            }
            );
        }
    }
    function chooseFile(e) {
        $("#afile").click();

    }



    function getFullPath(obj) {
        //debugger;
        //var path;
        ////window.URL.createObjectURL(obj.files.item(0));
        //var oFReader = new FileReader();
        //oFReader.readAsDataURL(obj.files.item(0));
        //oFReader.onloadend = function (oFRevent) {
        //    var src = oFRevent.target.result;
        //    debugger;
        //}
        ////if (obj) {
        ////    path= obj.value;
        ////    // ie
        ////    if (window.navigator.userAgent.indexOf("MSIE") >= 1) {
        ////        obj.select();
        ////        path = document.selection.createRange().text;
        ////    }
        ////    // firefox
        ////    else
        ////        if (window.navigator.userAgent.indexOf("Firefox") >= 1) {
        ////        if (obj.files) {
        ////            path = obj.files.item(0).getAsDataURL();
        ////        }
        ////    }
        ////}

        var json = { FileName: $("[name='tbProcess']").val()+"\\"+obj.files.item(0).name, WorkingPath: $("[name='tbProcess']").val(), Para: "" };
        var x = $("[name='taProcess']");
        x.val(JSON.stringify(json)).change();
        x.blur();
    }

</script>